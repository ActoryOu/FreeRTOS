// MISRA C-2012 Rules

{
    version : "2.0",
    standard : "c2012",
    title: "Coverity MISRA Configuration",
    deviations : [
        // Disable the following rules.
        {
            deviation: "Directive 4.4",
            reason: "This is advisory, allow to comment output code."
        },
        {
            deviation: "Directive 4.5",
            reason: "Allow names that MISRA considers ambiguous."
        },
        {
            deviation: "Directive 4.6",
            reason: "This is advisory, allow to use basic numerical types."
        },
        {
            deviation: "Directive 4.8",
            reason: "Allow inclusion of unused types. Header files for a specific port, which are needed by all files, may define types that are not used by a specific file."
        },
        {
            deviation: "Directive 4.9",
            reason: "Allow inclusion of function like macros."
        },
        {
            deviation: "Rule 1.2",
            reason: "Allow attributes."
        },
        {
            deviation: "Rule 2.3",
            reason: "Allow unused types. Some types are used by the application."
        },
        {
            deviation: "Rule 2.4",
            reason: "Allow unused tags. Some compilers warn if types are not tagged."
        },
        {
            deviation: "Rule 2.5",
            reason: "Allow unused macros. Library headers may define macros intended for the application's use, but not used by a specific file."
        },
        {
            deviation: "Rule 3.1",
            reason: "Allow nested comments. Documentation blocks contain comments for example code."
        },
        {
            deviation: "Rule 5.1",
            reason: "Allow use of all names."
        },
        {
            deviation: "Rule 5.8",
            reason: "Allow MPU wrapper to rename API."
        },
        {
            deviation: "Rule 5.9",
            reason: "This is advisory, allow identifiers to be same with internal linkage."
        },
        {
            deviation: "Rule 8.5",
            reason: "False alarm, functions are not declared more than once."
        },
        {
            deviation: "Rule 8.6",
            reason: "False alarm, functions like 'pxPortInitialiseStack' are defined correctly."
        },
        {
            deviation: "Rule 8.7",
            reason: "API functions are not used by library. They must be externally visible in order to be used by the application."
        },
        {
            deviation: "Rule 8.9",
            reason: "Maintain static variables at global view."
        },
        {
            deviation: "Rule 8.13",
            reason: "This is advisory, allow pointers to be non-constant even it's possible."
        },
        {
            deviation: "Rule 10.3",
            reason: "Because pdTRUE/pdFALSE are defined by FreeRTOS-Kernel are 0 and 1, which results in a boolean type.
                    Allow pdTRUE/pdFALSE to be assigned to BastType_t variables."
        },
        {
            deviation: "Rule 10.4",
            reason: "Because pdTRUE/pdFALSE are defined by FreeRTOS-Kernel are 0 and 1, which results in a boolean type.
                    Allow pdTRUE/pdFALSE to be compared with BastType_t variables."
        },
        {
            deviation: "Rule 10.5",
            reason: "Because pdTRUE/pdFALSE are defined by FreeRTOS-Kernel are 0 and 1, which results in a boolean type.
                    Allow pdTRUE/pdFALSE to be compared with BastType_t."
        },
        {
            deviation: "Rule 11.1",
            reason: "Allow conversion to be performed on function pointer."
        },
        {
            deviation: "Rule 11.4",
            reason: "This is advisory, allow conversion from pointer to object and an integer type."
        },
        {
            deviation: "Rule 11.5",
            reason: "Allow casts from void *. Contexts are passed as void * and must be cast to the correct data type before use."
        },
        {
            deviation: "Rule 15.4",
            reason: "This is advisory, allow multiple break/goto/return."
        },
        {
            deviation: "Rule 15.5",
            reason: "This is advisory, allow multiple break/goto/return."
        },
        {
            deviation: "Rule 17.8",
            reason: "This is advisory, allow function parameters to be modified."
        },
        {
            deviation: "Rule 18.4",
            reason: "This is advisory, allow '+', '-', '+=', '-=' to be applied on pointers."
        },
        {
            deviation: "Rule 19.2",
            reason: "Allow `union` to be used for better memory utilization."
        },
        {
            deviation: "Rule 20.5",
            reason: "This is advisory, allow #undef."
        },
        {
            deviation: "Rule 21.2",
            reason: "Allow use of all names."
        }
    ]
}

