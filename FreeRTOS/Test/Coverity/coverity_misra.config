// MISRA C-2012 Rules

{
    version : "2.0",
    standard : "c2012",
    title: "Coverity MISRA Configuration",
    deviations : [
        // Disable the following rules.
        {
            // Description: Identifiers in the same namespace with overlapping visibility should be 
            //              typographically unambiguous
            deviation: "Directive 4.5",
            reason: "Allow names that MISRA considers ambiguous."
        },
        {
            // Description: If a pointer to a structure or union is never dereferenced within a
            //              translation unit, then the implementation of the object should be hidden
            deviation: "Directive 4.8",
            reason: "Allow inclusion of unused types. Header files for a specific port, which are needed by all files, may define types that are not used by a specific file."
        },
        {
            // Description: A function should be used in preference to a function-like macro where they 
            //              are interchangeable
            deviation: "Directive 4.9",
            reason: "Allow inclusion of function like macros."
        },
        {
            // Description: Language extensions should not be used.
            deviation: "Rule 1.2",
            reason: "Allow attributes."
        },
        {
            // Description: A project should not contain unused type declarations.
            deviation: "Rule 2.3",
            reason: "Allow unused types. Some types are used by the application."
        },
        {
            // Description: A project should not contain unused tag declarations.
            deviation: "Rule 2.4",
            reason: "Allow unused tags. Some compilers warn if types are not tagged."
        },
        {
            // Description: A project should not contain unused macro declarations.
            deviation: "Rule 2.5",
            reason: "Allow unused macros. Library headers may define macros intended for the application's use, but not used by a specific file."
        },
        {
            // Description: The character sequences /* and // shall not be used within a comment.
            deviation: "Rule 3.1",
            reason: "Allow nested comments. Documentation blocks contain comments for example code."
        },
        {
            // Description: External identifiers shall be distinct.
            deviation: "Rule 5.1",
            reason: "Allow use of all names."
        },
        {
            // Description: Identifiers that define objects or functions with external linkage shall be unique.
            deviation: "Rule 5.8",
            reason: "Allow MPU wrapper to rename API."
        },
        {
            // Description: An external object or function shall be declared once in one and only one file.
            deviation: "Rule 8.5",
            reason: "False alarm, functions are not declared more than once."
        },
        {
            // Description: An identifier with external linkage shall have exactly one external definition.
            deviation: "Rule 8.6",
            reason: "False alarm, functions like 'pxPortInitialiseStack' are defined correctly."
        },
        {
            // Description: Functions and objects should not be defined with external linkage if they are referenced in only one translation unit.
            deviation: "Rule 8.7",
            reason: "API functions are not used by library. They must be externally visible in order to be used by the application."
        },
        {
            // Description: An object should be defined at block scope if its identifier only appears in a single function.
            deviation: "Rule 8.9",
            reason: "Maintain static variables at global view."
        },
        {
            // Description: The value of an expression should not be cast to an inappropriate essential type.
            deviation: "Rule 10.5",
            reason: "Because pdTRUE/pdFALSE are defined by FreeRTOS-Kernel are 0 and 1, which results in a boolean type.
                    Allow pdTRUE/pdFALSE to be compared with BastType_t."
        },
        {
            // Description: When an array with external linkage is declared, its size should be explicitly specified.
            deviation: "Rule 11.1",
            reason: "Allow conversion to be performed on function pointer."
        },
        {
            // Description: If a pointer to a structure or union is never dereferenced within a
            //              translation unit, then the implementation of the object should be hidden.
            deviation: "Rule 11.5",
            reason: "Allow casts from void *. Contexts are passed as void * and must be cast to the correct data type before use."
        },
        {
            // Description: The union keyword should not be used.
            deviation: "Rule 19.2",
            reason: "Allow `union` to be used for better memory utilization."
        },
        {
            // Description: A reserved identifier or reserved macro name shall not be declared.
            deviation: "Rule 21.2",
            reason: "Allow use of all names."
        }
    ]
}

